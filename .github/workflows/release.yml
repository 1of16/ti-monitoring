name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (z.B. 1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Als Pre-Release erstellen'
        required: false
        type: boolean
        default: true

env:
  PYTHON_VERSION: '3.12'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Tests
      run: |
        # Hier können Tests hinzugefügt werden
        echo "Tests würden hier laufen"
        
  build-portable:
    needs: test
    runs-on: windows-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create Portable Build
      run: |
        # PowerShell-Skript ausführen
        pwsh -File .\scripts\build-portable.ps1 -Force
        
    - name: Upload Portable Build
      uses: actions/upload-artifact@v3
      with:
        name: ti-monitoring-portable-${{ github.ref_name }}
        path: ti-monitoring-portable-*.zip
        retention-days: 30
        
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ti-monitoring-portable-*.zip
        prerelease: ${{ github.event.inputs.prerelease == 'true' || contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: true
        body: |
          ## TI-Monitoring Portable ${{ github.ref_name }}
          
          ### 🚀 Windows Portable Build
          - ✅ Vollständig portable Windows-Anwendung
          - ✅ Automatische Service-Installation mit NSSM
          - ✅ Virtuelle Python-Umgebung enthalten
          - ✅ Umfassende Installationsanleitung
          
          ### 📦 Installation
          1. ZIP-Datei entpacken
          2. `install-service.cmd` als Administrator ausführen
          3. Web-Interface unter http://localhost:8050 aufrufen
          
          ### ✨ Features
          - 🔍 Automatische TI-Service-Überwachung
          - 🌐 Web-basierte Benutzeroberfläche
          - 📧 E-Mail und Telegram-Benachrichtigungen
          - 📊 Detaillierte Statistiken und Logs
          
          ### 📋 Systemanforderungen
          - Windows 10/11 (64-bit)
          - Administratorrechte für Service-Installation
          - Internetverbindung für API-Updates
          
          ### 🔧 Support
          Bei Problemen siehe: [Installationsanleitung](docs/INSTALL_Windows_Portable.md)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  notify:
    needs: [test, build-portable]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify Success
      if: needs.build-portable.result == 'success'
      run: |
        echo "✅ Release erfolgreich erstellt: ${{ github.ref_name }}"
        
    - name: Notify Failure
      if: needs.build-portable.result == 'failure'
      run: |
        echo "❌ Release fehlgeschlagen: ${{ github.ref_name }}"
